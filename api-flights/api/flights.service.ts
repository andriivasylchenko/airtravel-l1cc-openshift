/**
 * Flight Offers Search
 *  Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).
 *
 * OpenAPI spec version: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Error400 } from '../model/error400';
import { Error500 } from '../model/error500';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FlightsService {

    protected basePath = 'https://test.api.amadeus.com/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Return list of Flight Offers based on searching criteria.
     * 
     * @param originLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) from which the traveler will depart, e.g. BOS for Boston
     * @param destinationLocationCode city/airport [IATA code](http://www.iata.org/publications/Pages/code-search.aspx) to which the traveler is going, e.g. PAR for Paris
     * @param departureDate the date on which the traveler will depart from the origin to go to the destination. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2017-12-25
     * @param returnDate the date on which the traveler will depart from the destination to return to the origin. If this parameter is not specified, only one-way itineraries are found. If this parameter is specified, only round-trip itineraries are found. Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-02-28
     * @param adults the number of adult travelers (age 12 or older on date of departure).
     * @param max maximum number of flight offers to return. If specified, the value should be greater than or equal to 1
     * @param children the number of child travelers (older than age 2 and younger than age 12 on date of departure) who will each have their own separate seat. If specified, this number should be greater than or equal to 0
     * @param infants the number of infant travelers (whose age is less or equal to 2 on date of departure). Infants travel on the lap of an adult traveler, and thus the number of infants must not exceed the number of adults. If specified, this number should be greater than or equal to 0
     * @param travelClass most of the flight time should be spent in a cabin of this quality or higher. The accepted travel class is economy, premium economy, business or first class. If no travel class is specified, the search considers any travel class
     * @param includedAirlineCodes This option ensures that the system will only consider these airlines. This can not be cumulated with parameter excludedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X 
     * @param excludedAirlineCodes This option ensures that the system will ignore these airlines. This can not be cumulated with parameter includedAirlineCodes.  Airlines are specified as [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx) and are comma-separated, e.g. 6X,7X,8X 
     * @param nonStop if set to true, the search will find only flights going from the origin to the destination with no stop in between
     * @param currencyCode the preferred currency for the flight offers. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
     * @param maxPrice maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFlightOffers(originLocationCode: string, destinationLocationCode: string, departureDate: string, returnDate: string, adults: number, max: number, children?: number, infants?: number, travelClass?: 'ECONOMY' | 'PREMIUM_ECONOMY' | 'BUSINESS' | 'FIRST', includedAirlineCodes?: string, excludedAirlineCodes?: string, nonStop?: boolean, currencyCode?: string, maxPrice?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFlightOffers(originLocationCode: string, destinationLocationCode: string, departureDate: string, returnDate: string, adults: number, max: number, children?: number, infants?: number, travelClass?: 'ECONOMY' | 'PREMIUM_ECONOMY' | 'BUSINESS' | 'FIRST', includedAirlineCodes?: string, excludedAirlineCodes?: string, nonStop?: boolean, currencyCode?: string, maxPrice?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFlightOffers(originLocationCode: string, destinationLocationCode: string, departureDate: string, returnDate: string, adults: number, max: number, children?: number, infants?: number, travelClass?: 'ECONOMY' | 'PREMIUM_ECONOMY' | 'BUSINESS' | 'FIRST', includedAirlineCodes?: string, excludedAirlineCodes?: string, nonStop?: boolean, currencyCode?: string, maxPrice?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFlightOffers(originLocationCode: string, destinationLocationCode: string, departureDate: string, returnDate: string, adults: number, max: number, children?: number, infants?: number, travelClass?: 'ECONOMY' | 'PREMIUM_ECONOMY' | 'BUSINESS' | 'FIRST', includedAirlineCodes?: string, excludedAirlineCodes?: string, nonStop?: boolean, currencyCode?: string, maxPrice?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (originLocationCode === null || originLocationCode === undefined) {
            throw new Error('Required parameter originLocationCode was null or undefined when calling getFlightOffers.');
        }

        if (destinationLocationCode === null || destinationLocationCode === undefined) {
            throw new Error('Required parameter destinationLocationCode was null or undefined when calling getFlightOffers.');
        }

        if (departureDate === null || departureDate === undefined) {
            throw new Error('Required parameter departureDate was null or undefined when calling getFlightOffers.');
        }

        if (returnDate === null || returnDate === undefined) {
            throw new Error('Required parameter returnDate was null or undefined when calling getFlightOffers.');
        }

        if (adults === null || adults === undefined) {
            throw new Error('Required parameter adults was null or undefined when calling getFlightOffers.');
        }

        if (max === null || max === undefined) {
            throw new Error('Required parameter max was null or undefined when calling getFlightOffers.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (originLocationCode !== undefined && originLocationCode !== null) {
            queryParameters = queryParameters.set('originLocationCode', <any>originLocationCode);
        }
        if (destinationLocationCode !== undefined && destinationLocationCode !== null) {
            queryParameters = queryParameters.set('destinationLocationCode', <any>destinationLocationCode);
        }
        if (departureDate !== undefined && departureDate !== null) {
            queryParameters = queryParameters.set('departureDate', <any>departureDate);
        }
        if (returnDate !== undefined && returnDate !== null) {
            queryParameters = queryParameters.set('returnDate', <any>returnDate);
        }
        if (adults !== undefined && adults !== null) {
            queryParameters = queryParameters.set('adults', <any>adults);
        }
        if (max !== undefined && max !== null) {
            queryParameters = queryParameters.set('max', <any>max);
        }
        if (children !== undefined && children !== null) {
            queryParameters = queryParameters.set('children', <any>children);
        }
        if (infants !== undefined && infants !== null) {
            queryParameters = queryParameters.set('infants', <any>infants);
        }
        if (travelClass !== undefined && travelClass !== null) {
            queryParameters = queryParameters.set('travelClass', <any>travelClass);
        }
        if (includedAirlineCodes !== undefined && includedAirlineCodes !== null) {
            queryParameters = queryParameters.set('includedAirlineCodes', <any>includedAirlineCodes);
        }
        if (excludedAirlineCodes !== undefined && excludedAirlineCodes !== null) {
            queryParameters = queryParameters.set('excludedAirlineCodes', <any>excludedAirlineCodes);
        }
        if (nonStop !== undefined && nonStop !== null) {
            queryParameters = queryParameters.set('nonStop', <any>nonStop);
        }
        if (currencyCode !== undefined && currencyCode !== null) {
            queryParameters = queryParameters.set('currencyCode', <any>currencyCode);
        }
        if (maxPrice !== undefined && maxPrice !== null) {
            queryParameters = queryParameters.set('maxPrice', <any>maxPrice);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.amadeus+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.amadeus+json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/shopping/flight-offers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
